generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SubCategory2 {
  id                String            @id @default(cuid())
  name              String
  sub_category_1_id String
  display_order     Int               @default(0)
  created_at        DateTime          @default(now())
  updated_at        DateTime
  resources         ResourceLibrary[]
  sub_categories_1  sub_categories_1  @relation(fields: [sub_category_1_id], references: [id], onDelete: Cascade)

  @@unique([sub_category_1_id, name])
  @@map("sub_categories_2")
}

model UserFavorite {
  id               String          @id @default(cuid())
  user_id          String
  resource_id      String
  status           FavoriteStatus  @default(OK)
  notes            String?
  created_at       DateTime        @default(now())
  updated_at       DateTime
  resource_library ResourceLibrary @relation(fields: [resource_id], references: [id], onDelete: Cascade)
  User             User            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, resource_id])
  @@index([resource_id])
  @@index([user_id])
  @@map("user_favorites")
}

model Project {
  id                    String         @id @default(cuid())
  name                  String
  description           String?
  client_name           String
  client_email          String?
  address               String?
  status                ProjectStatus  @default(BROUILLON)
  budget_total          Float?
  budget_spent          Float?
  progress_percentage   Int            @default(0)
  start_date            DateTime?
  end_date              DateTime?
  created_by            String
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt
  image_url             String?
  delivery_contact_name String?
  delivery_company      String?
  delivery_address      String?
  delivery_city         String?
  delivery_zip_code     String?
  delivery_country      String?
  delivery_access_code  String?
  delivery_floor        String?
  delivery_door_code    String?
  delivery_instructions String?
  billing_addresses     Json?
  clientEmails          String[]
  deliveryElevator      Boolean        @default(true)
  deliveryFloorInfo     String?
  deliveryPhotos        String[]
  exteriorSurfaceM2     Float?
  exteriorType          ExteriorType?
  hasExterior           Boolean        @default(false)
  projectType           ProjectType?
  surfaceM2             Float?
  prescriptions         Prescription[]
  files                 ProjectFile[]
  creator               User           @relation(fields: [created_by], references: [id])
  spaces                Space[]
  clientAccess          ProjectClient[]

  @@map("projects")
}

model ProjectClient {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
  @@index([userId])
  @@map("project_clients")
}

model Space {
  id                 String              @id @default(cuid())
  name               String
  type               SpaceType           @default(AUTRE)
  description        String?
  surfaceM2          Float?
  projectId          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  prescriptionSpaces PrescriptionSpace[]
  prescriptions      Prescription[]
  projectFiles       ProjectFile[]
  spaceFiles         SpaceFile[]
  project            Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("spaces")
}

model PrescriptionCategory {
  id            String            @id @default(cuid())
  name          String            @unique
  description   String?
  icon          String?
  colorHex      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  prescriptions Prescription[]
  resources     ResourceLibrary[]

  @@map("prescription_categories")
}

model Prescription {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  quantity              Int                    @default(1)
  unitPrice             Float?
  totalPrice            Float?
  status                PrescriptionStatus     @default(EN_COURS)
  projectId             String
  spaceId               String?
  categoryId            String
  brand                 String?
  reference             String?
  supplier              String?
  productUrl            String?
  notes                 String?
  createdBy             String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  contactId             String?
  prescriptionDocuments PrescriptionDocument[]
  spaces                PrescriptionSpace[]
  category              PrescriptionCategory   @relation(fields: [categoryId], references: [id])
  contact               Contact?               @relation("ContactPrescriptions", fields: [contactId], references: [id])
  creator               User                   @relation(fields: [createdBy], references: [id])
  project               Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  space                 Space?                 @relation(fields: [spaceId], references: [id])

  @@map("prescriptions")
}

model PrescriptionSpace {
  id             String       @id @default(cuid())
  prescriptionId String
  spaceId        String
  quantity       Int          @default(1)
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  space          Space        @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([prescriptionId, spaceId])
  @@map("prescription_spaces")
}

model PrescriptionDocument {
  id             String       @id @default(cuid())
  name           String
  originalName   String
  type           FileType
  mimeType       String
  size           Int
  url            String
  description    String?
  prescriptionId String
  uploadedBy     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [uploadedBy], references: [id])

  @@map("prescription_documents")
}

model ProjectFile {
  id           String       @id @default(cuid())
  name         String
  originalName String
  type         FileType
  category     FileCategory
  mimeType     String
  size         Int
  url          String
  description  String?
  projectId    String
  spaceId      String?
  uploadedBy   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  space        Space?       @relation(fields: [spaceId], references: [id])
  uploader     User         @relation(fields: [uploadedBy], references: [id])

  @@map("project_files")
}

model SpaceFile {
  id          String   @id @default(cuid())
  filename    String
  url         String
  fileType    FileType
  size        Int?
  mimeType    String?
  description String?
  spaceId     String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  uploader    User     @relation(fields: [uploadedBy], references: [id])

  @@map("space_files")
}

model Contact {
  id            String            @id @default(cuid())
  name          String
  company       String?
  email         String?
  phone         String?
  website       String?
  address       String?
  notes         String?
  contactType   ContactType
  isSupplier    Boolean           @default(false)
  isReseller    Boolean           @default(false)
  createdBy     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  creator       User              @relation(fields: [createdBy], references: [id])
  prescriptions Prescription[]    @relation("ContactPrescriptions")
  resources     ResourceLibrary[] @relation("ContactResources")

  @@map("contacts")
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  website   String?
  country   String?
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brands")
}

model ResourceLibrary {
  id             String               @id @default(cuid())
  name           String
  description    String?
  categoryId     String
  brand          String?
  reference      String?
  productUrl     String?
  priceMin       Float?
  priceMax       Float?
  supplier       String?
  availability   String?
  imageUrl       String?
  tags           String[]
  isFavorite     Boolean              @default(false)
  createdBy      String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  categoryPath   String[]
  contactId      String?
  countryOrigin  String?
  dimensions     Json?
  images         String[]
  mainImageUrl   String?
  pricePro       Float?
  technicalSheet String?
  price          Float?
  subCategory2Id String?              @map("sub_category_2_id")
  type           ResourceType?        @default(INTERIEUR)
  category       PrescriptionCategory @relation(fields: [categoryId], references: [id])
  contact        Contact?             @relation("ContactResources", fields: [contactId], references: [id])
  creator        User                 @relation(fields: [createdBy], references: [id])
  subCategory2   SubCategory2?        @relation(fields: [subCategory2Id], references: [id])
  user_favorites UserFavorite[]

  @@map("resource_library")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                 @id @default(cuid())
  firstName              String?
  lastName               String?
  email                  String                 @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  lastLoginAt            DateTime?
  role                   UserRole               @default(CLIENT)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  Account                Account[]
  Session                Session[]
  contacts               Contact[]
  prescription_documents PrescriptionDocument[]
  prescriptions          Prescription[]
  projectFiles           ProjectFile[]
  projects               Project[]
  resourceLibrary        ResourceLibrary[]
  spaceFiles             SpaceFile[]
  user_favorites         UserFavorite[]
  clientProjects         ProjectClient[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model parent_categories {
  id               String             @id
  name             String             @unique
  displayOrder     Int                @default(0)
  created_at       DateTime           @default(now())
  updated_at       DateTime
  sub_categories_1 sub_categories_1[]
}

model sub_categories_1 {
  id                String            @id
  name              String
  parent_id         String
  display_order     Int               @default(0)
  created_at        DateTime          @default(now())
  updated_at        DateTime
  parent_categories parent_categories @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  sub_categories_2  SubCategory2[]

  @@unique([parent_id, name])
}

enum UserRole {
  CLIENT
  AGENCY
  ADMIN
}

enum ProjectStatus {
  BROUILLON
  EN_COURS
  EN_ATTENTE
  TERMINE
  ANNULE
}

enum ProjectType {
  HOTEL
  RESIDENTIEL_APPARTEMENT
  RESIDENTIEL_MAISON
  RESIDENTIEL_IMMEUBLE
  RESTAURANT
  RETAIL
  BUREAUX
  SCENOGRAPHIE
  AUTRE
}

enum ExteriorType {
  JARDIN
  TERRASSE
  BALCON
}

enum SpaceType {
  SALON
  CUISINE
  CHAMBRE
  SALLE_DE_BAIN
  BUREAU
  ENTREE
  COULOIR
  AUTRE
}

enum PrescriptionStatus {
  EN_COURS
  VALIDE
  COMMANDE
  LIVRE
  ANNULE
}

enum FileType {
  IMAGE
  PDF
  DOCUMENT
  MODEL_3D
  PLAN
  VIDEO
  PLAN_2D
  ELEVATION
  VISUAL_3D
  PHOTO
  SKETCH
  TECHNICAL
  OTHER
}

enum FileCategory {
  VISUEL_3D
  PLANS_TECHNIQUES
  ELEVATIONS
  PHOTOS_CHANTIER
  DOCUMENTS
  AUTRES
}

enum ContactType {
  FOURNISSEUR
  REVENDEUR
  MARQUE
  ARTISAN
  AUTRE
}

enum ResourceType {
  INTERIEUR
  EXTERIEUR
}

enum FavoriteStatus {
  PAS_OK
  OK
  J_ADORE
}
