// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  lastLoginAt   DateTime?
  role          UserRole  @default(CLIENT)
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  prescriptions Prescription[]
  resources     ResourceLibrary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CLIENT
  AGENCY
  ADMIN
}

model Project {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  client_name        String
  client_email       String?
  status             ProjectStatus @default(BROUILLON)
  budget_total       Float?
  budget_spent       Float?
  progress_percentage Int      @default(0)
  
  created_by         String
  creator            User     @relation(fields: [created_by], references: [id])
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  
  spaces             Space[]
  prescriptions      Prescription[]
  
  // Pour l'image du projet
  image_url          String?

  @@map("projects")
}

enum ProjectStatus {
  BROUILLON
  EN_COURS
  EN_ATTENTE
  TERMINE
  ANNULE
}

model Space {
  id          String    @id @default(cuid())
  name        String
  type        SpaceType @default(AUTRE)
  description String?
  surfaceM2   Float?
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  
  prescriptions Prescription[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("spaces")
}

enum SpaceType {
  SALON
  CUISINE
  CHAMBRE
  SALLE_DE_BAIN
  BUREAU
  ENTREE
  COULOIR
  AUTRE
}

model PrescriptionCategory {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  icon          String?
  colorHex      String?
  
  prescriptions Prescription[]
  resources     ResourceLibrary[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("prescription_categories")
}

model Prescription {
  id          String      @id @default(cuid())
  name        String
  description String?
  quantity    Int         @default(1)
  unitPrice   Float?
  totalPrice  Float?
  status      PrescriptionStatus @default(EN_COURS)
  
  // Liens vers d'autres modèles
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  
  space       Space?      @relation(fields: [spaceId], references: [id])
  spaceId     String?
  
  category    PrescriptionCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  
  // Détails du produit
  brand       String?
  reference   String?
  supplier    String?
  productUrl  String?
  
  // Notes et commentaires
  notes       String?
  
  createdBy   String
  creator     User        @relation(fields: [createdBy], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("prescriptions")
}

enum PrescriptionStatus {
  EN_COURS
  VALIDE
  COMMANDE
  LIVRE
  ANNULE
}

model ResourceLibrary {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     PrescriptionCategory @relation(fields: [categoryId], references: [id])
  categoryId   String
  brand        String?
  reference    String?
  productUrl   String?
  priceMin     Float?
  priceMax     Float?
  supplier     String?
  availability String?
  imageUrl     String?
  tags         String[]
  isFavorite   Boolean  @default(false)
  
  createdBy    String
  creator      User     @relation(fields: [createdBy], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("resource_library")
}