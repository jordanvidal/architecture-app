generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String            @unique
  emailVerified DateTime?
  image         String?
  password      String?
  lastLoginAt   DateTime?
  role          UserRole          @default(CLIENT)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  accounts      Account[]
  sessions      Session[]
  prescriptions Prescription[]
  uploadedFiles ProjectFile[]
  projects      Project[]
  resources     ResourceLibrary[]
  spaceFiles    SpaceFile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                    String         @id @default(cuid())
  name                  String
  description           String?
  client_name           String
  client_email          String?
  address               String?
  status                ProjectStatus  @default(BROUILLON)
  budget_total          Float?
  budget_spent          Float?
  progress_percentage   Int            @default(0)
  start_date            DateTime?
  end_date              DateTime?
  created_by            String
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt
  image_url             String?
  delivery_contact_name String?
  delivery_company      String?
  delivery_address      String?
  delivery_city         String?
  delivery_zip_code     String?
  delivery_country      String?
  delivery_access_code  String?
  delivery_floor        String?
  delivery_door_code    String?
  delivery_instructions String?
  billing_addresses     Json?
  prescriptions         Prescription[]
  files                 ProjectFile[]
  creator               User           @relation(fields: [created_by], references: [id])
  spaces                Space[]

  @@map("projects")
}

model Space {
  id            String         @id @default(cuid())
  name          String
  type          SpaceType      @default(AUTRE)
  description   String?
  surfaceM2     Float?
  projectId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  prescriptions Prescription[]
  projectFiles  ProjectFile[]
  spaceFiles    SpaceFile[]
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("spaces")
}

model PrescriptionCategory {
  id            String            @id @default(cuid())
  name          String            @unique
  description   String?
  icon          String?
  colorHex      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  prescriptions Prescription[]
  resources     ResourceLibrary[]

  @@map("prescription_categories")
}

model Prescription {
  id          String               @id @default(cuid())
  name        String
  description String?
  quantity    Int                  @default(1)
  unitPrice   Float?
  totalPrice  Float?
  status      PrescriptionStatus   @default(EN_COURS)
  projectId   String
  spaceId     String?
  categoryId  String
  brand       String?
  reference   String?
  supplier    String?
  productUrl  String?
  notes       String?
  createdBy   String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  category    PrescriptionCategory @relation(fields: [categoryId], references: [id])
  creator     User                 @relation(fields: [createdBy], references: [id])
  project     Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  space       Space?               @relation(fields: [spaceId], references: [id])

  @@map("prescriptions")
}

model ResourceLibrary {
  id           String               @id @default(cuid())
  name         String
  description  String?
  categoryId   String
  brand        String?
  reference    String?
  productUrl   String?
  priceMin     Float?
  priceMax     Float?
  supplier     String?
  availability String?
  imageUrl     String?
  tags         String[]
  isFavorite   Boolean              @default(false)
  createdBy    String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  category     PrescriptionCategory @relation(fields: [categoryId], references: [id])
  creator      User                 @relation(fields: [createdBy], references: [id])

  @@map("resource_library")
}

model ProjectFile {
  id           String       @id @default(cuid())
  name         String
  originalName String
  type         FileType
  category     FileCategory
  mimeType     String
  size         Int
  url          String
  description  String?
  projectId    String
  spaceId      String?
  uploadedBy   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  space        Space?       @relation(fields: [spaceId], references: [id])
  uploader     User         @relation(fields: [uploadedBy], references: [id])

  @@map("project_files")
}

model SpaceFile {
  id          String   @id @default(cuid())
  filename    String
  url         String
  fileType    FileType
  size        Int?
  mimeType    String?
  description String?
  spaceId     String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  uploader    User     @relation(fields: [uploadedBy], references: [id])

  @@map("space_files")
}

enum UserRole {
  CLIENT
  AGENCY
  ADMIN
}

enum ProjectStatus {
  BROUILLON
  EN_COURS
  EN_ATTENTE
  TERMINE
  ANNULE
}

enum SpaceType {
  SALON
  CUISINE
  CHAMBRE
  SALLE_DE_BAIN
  BUREAU
  ENTREE
  COULOIR
  AUTRE
}

enum PrescriptionStatus {
  EN_COURS
  VALIDE
  COMMANDE
  LIVRE
  ANNULE
}

enum FileType {
  IMAGE
  PDF
  DOCUMENT
  MODEL_3D
  PLAN
  VIDEO
  PLAN_2D
  ELEVATION
  VISUAL_3D
  PHOTO
  SKETCH
  TECHNICAL
  OTHER
}

enum FileCategory {
  VISUEL_3D
  PLANS_TECHNIQUES
  ELEVATIONS
  PHOTOS_CHANTIER
  DOCUMENTS
  AUTRES
}
