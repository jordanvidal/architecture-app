generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id
  firstName        String?
  lastName         String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  lastLoginAt      DateTime?
  role             UserRole           @default(CLIENT)
  created_at        DateTime           @default(now())
  updated_at        DateTime
  Account          Account[]
  Session          Session[]
  contacts         contacts[]
  prescriptions    prescriptions[]
  project_files    project_files[]
  projects         projects[]
  resource_library resource_library[]
  space_files      space_files[]
  prescriptionDocuments PrescriptionDocument[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model brands {
  id        String   @id
  name      String   @unique
  website   String?
  country   String?
  logo      String?
  created_at DateTime @default(now())
  updated_at DateTime
}

model contacts {
  id               String             @id
  name             String
  company          String?
  email            String?
  phone            String?
  website          String?
  address          String?
  notes            String?
  contactType      ContactType
  isSupplier       Boolean            @default(false)
  isReseller       Boolean            @default(false)
  created_by        String
  created_at        DateTime           @default(now())
  updated_at        DateTime
  User             User               @relation(fields: [created_by], references: [id])
  prescriptions    prescriptions[]
  resource_library resource_library[]
}

model prescription_categories {
  id               String             @id
  name             String             @unique
  description      String?
  icon             String?
  colorHex         String?
  created_at        DateTime           @default(now())
  updated_at        DateTime
  prescriptions    prescriptions[]
  resource_library resource_library[]
}


model prescription_spaces {
  id             String        @id
  prescriptionId String
  spaceId        String
  quantity       Int           @default(1)
  prescriptions  prescriptions @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  spaces         spaces        @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([prescriptionId, spaceId])
}

model prescriptions {
  id                      String                  @id
  name                    String
  description             String?
  quantity                Int                     @default(1)
  unitPrice               Float?
  totalPrice              Float?
  status                  PrescriptionStatus      @default(EN_COURS)
  projectId               String
  spaceId                 String?
  categoryId              String
  brand                   String?
  reference               String?
  supplier                String?
  productUrl              String?
  notes                   String?
  created_by               String
  created_at               DateTime                @default(now())
  updated_at               DateTime
  contactId               String?
  prescription_spaces     prescription_spaces[]
  prescription_categories prescription_categories @relation(fields: [categoryId], references: [id])
  contacts                contacts?               @relation(fields: [contactId], references: [id])
  User                    User                    @relation(fields: [created_by], references: [id])
  projects                projects                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  spaces                  spaces?                 @relation(fields: [spaceId], references: [id])
  documents               PrescriptionDocument[]
}

model PrescriptionDocument {
  id             String       @id @default(cuid())
  name           String
  originalName   String
  type           FileType
  mimeType       String
  size           Int
  url            String
  description    String?
  prescriptionId String
  uploadedBy     String
  created_at      DateTime     @default(now())
  updatedAt      DateTime      @updatedAt
  prescription   prescriptions @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  uploader       User         @relation(fields: [uploadedBy], references: [id])

  @@map("prescription_documents")
}

model project_files {
  id           String       @id
  name         String
  originalName String
  type         FileType
  category     FileCategory
  mimeType     String
  size         Int
  url          String
  description  String?
  projectId    String
  spaceId      String?
  uploadedBy   String
  created_at    DateTime     @default(now())
  updated_at    DateTime
  projects     projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  spaces       spaces?      @relation(fields: [spaceId], references: [id])
  User         User         @relation(fields: [uploadedBy], references: [id])
}

model projects {
  id                    String          @id
  name                  String
  description           String?
  client_name           String
  client_email          String?
  address               String?
  status                ProjectStatus   @default(BROUILLON)
  budget_total          Float?
  budget_spent          Float?
  progress_percentage   Int             @default(0)
  start_date            DateTime?
  end_date              DateTime?
  created_by            String
  created_at            DateTime        @default(now())
  updated_at            DateTime
  image_url             String?
  delivery_contact_name String?
  delivery_company      String?
  delivery_address      String?
  delivery_city         String?
  delivery_zip_code     String?
  delivery_country      String?
  delivery_access_code  String?
  delivery_floor        String?
  delivery_door_code    String?
  delivery_instructions String?
  billing_addresses     Json?
  clientEmails          String[]
  deliveryElevator      Boolean         @default(true)
  deliveryFloorInfo     String?
  deliveryPhotos        String[]
  exteriorSurfaceM2     Float?
  exteriorType          ExteriorType?
  hasExterior           Boolean         @default(false)
  projectType           ProjectType?
  surfaceM2             Float?
  prescriptions         prescriptions[]
  project_files         project_files[]
  User                  User            @relation(fields: [created_by], references: [id])
  spaces                spaces[]
}

model resource_library {
  id                      String                  @id
  name                    String
  description             String?
  categoryId              String
  brand                   String?
  reference               String?
  productUrl              String?
  priceMin                Float?
  priceMax                Float?
  supplier                String?
  availability            String?
  imageUrl                String?
  tags                    String[]
  isFavorite              Boolean                 @default(false)
  created_by               String
  created_at               DateTime                @default(now())
  updated_at               DateTime
  categoryPath            String[]
  contactId               String?
  countryOrigin           String?
  dimensions              Json?
  images                  String[]
  mainImageUrl            String?
  pricePro                Float?
  technicalSheet          String?
  price                   Float?
  prescription_categories prescription_categories @relation(fields: [categoryId], references: [id])
  contacts                contacts?               @relation(fields: [contactId], references: [id])
  User                    User                    @relation(fields: [created_by], references: [id])
}

model space_files {
  id          String   @id
  filename    String
  url         String
  fileType    FileType
  size        Int?
  mimeType    String?
  description String?
  spaceId     String
  uploadedBy  String
  created_at   DateTime @default(now())
  updated_at   DateTime
  spaces      spaces   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [uploadedBy], references: [id])
}

model spaces {
  id                  String                @id
  name                String
  type                SpaceType             @default(AUTRE)
  description         String?
  surfaceM2           Float?
  projectId           String
  created_at           DateTime              @default(now())
  updated_at           DateTime
  prescription_spaces prescription_spaces[]
  prescriptions       prescriptions[]
  project_files       project_files[]
  space_files         space_files[]
  projects            projects              @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum ContactType {
  FOURNISSEUR
  REVENDEUR
  MARQUE
  ARTISAN
  AUTRE
}

enum ExteriorType {
  JARDIN
  TERRASSE
  BALCON
}

enum FileCategory {
  VISUEL_3D
  PLANS_TECHNIQUES
  ELEVATIONS
  PHOTOS_CHANTIER
  DOCUMENTS
  AUTRES
}

enum FileType {
  IMAGE
  PDF
  DOCUMENT
  MODEL_3D
  PLAN
  VIDEO
  PLAN_2D
  ELEVATION
  VISUAL_3D
  PHOTO
  SKETCH
  TECHNICAL
  OTHER
}

enum PrescriptionStatus {
  EN_COURS
  VALIDE
  COMMANDE
  LIVRE
  ANNULE
}

enum ProjectStatus {
  BROUILLON
  EN_COURS
  EN_ATTENTE
  TERMINE
  ANNULE
}

enum ProjectType {
  HOTEL
  RESIDENTIEL_APPARTEMENT
  RESIDENTIEL_MAISON
  RESIDENTIEL_IMMEUBLE
  RESTAURANT
  RETAIL
  BUREAUX
  SCENOGRAPHIE
  AUTRE
}

enum SpaceType {
  SALON
  CUISINE
  CHAMBRE
  SALLE_DE_BAIN
  BUREAU
  ENTREE
  COULOIR
  AUTRE
}

enum UserRole {
  CLIENT
  AGENCY
  ADMIN
}
