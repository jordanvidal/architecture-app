import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import prisma from '@/lib/prisma';
import { authOptions } from '@/lib/auth';

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Non autorisé' }, { status: 401 });
    }

    const resources = await prisma.resourceLibrary.findMany({
      include: {
        creator: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true
          }
        },
        category: true,
        subCategory2: {
          include: {
            subCategory1: {
              include: {
                parent: true
              }
            }
          }
        },
        userFavorites: {
          where: {
            userId: session.user.id
          },
          select: {
            status: true,
            notes: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    // Transformer les données pour correspondre au format attendu
    const transformedResources = resources.map(resource => ({
      ...resource,
      addedBy: {
        id: resource.creator.id,
        name: `${resource.creator.firstName || ''} ${resource.creator.lastName || ''}`.trim() || resource.creator.email,
        email: resource.creator.email
      }
    }));

    return NextResponse.json(transformedResources);
  } catch (error) {
    console.error('Erreur lors de la récupération des ressources:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la récupération des ressources' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Non autorisé' }, { status: 401 });
    }

    const body = await request.json();
    const {
      name,
      description,
      brand,
      reference,
      imageUrl,
      productUrl,
      type,
      subCategory2Id,
      categoryId,
      price,
      pricePro,
      supplier,
      countryOrigin,
      technicalSheet,
      images,
      mainImageUrl
    } = body;

    // Créer la ressource
    const resource = await prisma.resourceLibrary.create({
      data: {
        name,
        description,
        brand,
        reference,
        imageUrl: imageUrl || mainImageUrl,
        mainImageUrl,
        images: images || [],
        productUrl,
        type,
        subCategory2Id,
        categoryId,
        price,
        pricePro,
        supplier,
        countryOrigin,
        technicalSheet,
        createdBy: session.user.id
      },
      include: {
        creator: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true
          }
        },
        category: true,
        subCategory2: {
          include: {
            subCategory1: {
              include: {
                parent: true
              }
            }
          }
        }
      }
    });

    // Transformer pour le format attendu
    const transformedResource = {
      ...resource,
      addedBy: {
        id: resource.creator.id,
        name: `${resource.creator.firstName || ''} ${resource.creator.lastName || ''}`.trim() || resource.creator.email,
        email: resource.creator.email
      }
    };

    return NextResponse.json(transformedResource);
  } catch (error) {
    console.error('Erreur lors de la création de la ressource:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la création de la ressource' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Non autorisé' }, { status: 401 });
    }

    const body = await request.json();
    const {
      id,
      name,
      description,
      brand,
      reference,
      imageUrl,
      productUrl,
      type,
      subCategory2Id,
      categoryId,
      price,
      pricePro,
      supplier,
      countryOrigin,
      technicalSheet,
      images,
      mainImageUrl
    } = body;

    const resource = await prisma.resourceLibrary.update({
      where: { id },
      data: {
        name,
        description,
        brand,
        reference,
        imageUrl: imageUrl || mainImageUrl,
        mainImageUrl,
        images: images || [],
        productUrl,
        type,
        subCategory2Id,
        categoryId,
        price,
        pricePro,
        supplier,
        countryOrigin,
        technicalSheet
      },
      include: {
        creator: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true
          }
        },
        category: true,
        subCategory2: {
          include: {
            subCategory1: {
              include: {
                parent: true
              }
            }
          }
        },
        userFavorites: {
          where: {
            userId: session.user.id
          },
          select: {
            status: true,
            notes: true
          }
        }
      }
    });

    const transformedResource = {
      ...resource,
      addedBy: {
        id: resource.creator.id,
        name: `${resource.creator.firstName || ''} ${resource.creator.lastName || ''}`.trim() || resource.creator.email,
        email: resource.creator.email
      }
    };

    return NextResponse.json(transformedResource);
  } catch (error) {
    console.error('Erreur lors de la mise à jour de la ressource:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la mise à jour de la ressource' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Non autorisé' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { error: 'ID de ressource manquant' },
        { status: 400 }
      );
    }

    await prisma.resourceLibrary.delete({
      where: { id }
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur lors de la suppression de la ressource:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la suppression de la ressource' },
      { status: 500 }
    );
  }
}