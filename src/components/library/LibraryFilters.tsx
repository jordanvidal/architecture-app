interface LibraryFiltersProps {
  resources: any[]
  selectedCategory: string
  setSelectedCategory: (category: string) => void
  selectedRoom: string
  setSelectedRoom: (room: string) => void
  viewMode: 'grid' | 'list'
  setViewMode: (mode: 'grid' | 'list') => void
}

export default function LibraryFilters({
  resources,
  selectedCategory,
  setSelectedCategory,
  selectedRoom,
  setSelectedRoom,
  viewMode,
  setViewMode
}: LibraryFiltersProps) {
  return (
    <div className="bg-white rounded-xl border border-slate-200 p-6 shadow-sm space-y-4">
      {/* S√©lecteur de vue */}
      <div className="flex justify-between items-center">
        <h3 className="font-medium text-slate-900">Affichage et filtres</h3>
        <div className="flex rounded-lg border border-slate-200 p-1">
          <button
            onClick={() => setViewMode('grid')}
            className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
              viewMode === 'grid'
                ? 'bg-slate-800 text-white'
                : 'text-slate-600 hover:text-slate-800'
            }`}
          >
            <span className="mr-1">‚äû</span> Grille
          </button>
          <button
            onClick={() => setViewMode('list')}
            className={`px-3 py-1 rounded text-sm font-medium transition-colors ${
              viewMode === 'list'
                ? 'bg-slate-800 text-white'
                : 'text-slate-600 hover:text-slate-800'
            }`}
          >
            <span className="mr-1">‚ò∞</span> Liste
          </button>
        </div>
      </div>

      {/* Filtres par cat√©gorie */}
      <div>
        <h4 className="font-medium text-slate-900 mb-3">Par cat√©gorie</h4>
        <div className="flex flex-wrap gap-2">
          {[
            { name: 'ALL', label: 'Tous', icon: 'üìö', count: resources.length },
            { name: 'FAVORITES', label: 'Favoris', icon: '‚≠ê', count: resources.filter(r => r.isFavorite).length },
            { name: 'mobilier', label: 'Mobilier', icon: 'üõãÔ∏è', count: resources.filter(r => r.category?.name === 'mobilier').length },
            { name: 'eclairage', label: '√âclairage', icon: 'üí°', count: resources.filter(r => r.category?.name === 'eclairage').length },
            { name: 'decoration', label: 'D√©coration', icon: 'üñºÔ∏è', count: resources.filter(r => r.category?.name === 'decoration').length },
            { name: 'textile', label: 'Textile', icon: 'üß∂', count: resources.filter(r => r.category?.name === 'textile').length },
            { name: 'revetement', label: 'Rev√™tement', icon: 'üß±', count: resources.filter(r => r.category?.name === 'revetement').length },
            { name: 'peinture', label: 'Peinture', icon: 'üé®', count: resources.filter(r => r.category?.name === 'peinture').length }
          ].map((category) => (
            <button
              key={category.name}
              onClick={() => setSelectedCategory(category.name)}
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                selectedCategory === category.name
                  ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-md'
                  : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
              }`}
            >
              <span className="mr-1">{category.icon}</span>
              {category.label} ({category.count})
            </button>
          ))}
        </div>
      </div>

      {/* Filtres par pi√®ce */}
      <div>
        <h4 className="font-medium text-slate-900 mb-3">Par pi√®ce</h4>
        <div className="flex flex-wrap gap-2">
          {[
            { key: 'ALL', label: 'Toutes les pi√®ces', icon: 'üè†' },
            { key: 'salon', label: 'Salon', icon: 'üõãÔ∏è' },
            { key: 'cuisine', label: 'Cuisine', icon: 'üç≥' },
            { key: 'chambre', label: 'Chambre', icon: 'üõèÔ∏è' },
            { key: 'salle de bain', label: 'Salle de bain', icon: 'üöø' },
            { key: 'bureau', label: 'Bureau', icon: 'üíª' },
            { key: 'entree', label: 'Entr√©e', icon: 'üö™' },
            { key: 'exterieur', label: 'Ext√©rieur', icon: 'üåø' }
          ].map((room) => (
            <button
              key={room.key}
              onClick={() => setSelectedRoom(room.key)}
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                selectedRoom === room.key
                  ? 'bg-gradient-to-r from-green-600 to-teal-600 text-white shadow-md'
                  : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
              }`}
            >
              <span className="mr-1">{room.icon}</span>
              {room.label}
            </button>
          ))}
        </div>
      </div>
    </div>
  )
}